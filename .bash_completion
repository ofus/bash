_AI()
{
    local cur
    cur=${COMP_WORDS[COMP_CWORD]}

    COMPREPLY=( $( apt-cache --no-generate pkgnames "$cur" 2> /dev/null ) )
    return 0
}
complete -F _AI ai

_AQ()
{
    local cur
    cur=${COMP_WORDS[COMP_CWORD]}

    COMPREPLY=( $( apt-cache --no-generate pkgnames "$cur" 2> /dev/null ) )
    return 0
}
complete -F _AQ aq

_AG()
{
    local cur
    cur=${COMP_WORDS[COMP_CWORD]}

    COMPREPLY=( $( apt-cache --no-generate pkgnames "$cur" 2> /dev/null ) )
    return 0
}
complete -F _AG ag

_AQG()
{
    local cur
    cur=${COMP_WORDS[COMP_CWORD]}

    COMPREPLY=( $( apt-cache --no-generate pkgnames "$cur" 2> /dev/null ) )
    return 0
}
complete -F _AQ aqg

_AUN()
{
    local cur
    cur=${COMP_WORDS[COMP_CWORD]}

    COMPREPLY=( $( dpkg --get-selections  | grep -v deinstall | awk {' print $1 '} "$cur" 2> /dev/null ) )
    return 0
}
complete -F _AUN aun

_PACI()
{
    local cur
    cur=${COMP_WORDS[COMP_CWORD]}

    COMPREPLY=( $( pacman -Sl | awk {' print $2 '} | grep "^$cur" 2> /dev/null ) )
    return 0
}
complete -F _PACI paci

_PACQ()
{
    local cur
    cur=${COMP_WORDS[COMP_CWORD]}

    COMPREPLY=( $( pacman -Sl | awk {' print $2 '} | grep "^$cur" 2> /dev/null ) )
    return 0
}
complete -F _PACQ pacq

_PACG()
{
    local cur
    cur=${COMP_WORDS[COMP_CWORD]}

    COMPREPLY=( $( pacman -Sl | awk {' print $2 '} | grep "^$cur" 2> /dev/null ) )
    return 0
}
complete -F _PACG pacg

_PACQG()
{
    local cur
    cur=${COMP_WORDS[COMP_CWORD]}

    COMPREPLY=( $( pacman -Sl | awk {' print $2 '} | grep "^$cur" 2> /dev/null ) )
    return 0
}
complete -F _PACQG pacqg

_PACUN()
{
    local cur
    cur=${COMP_WORDS[COMP_CWORD]}

    COMPREPLY=( $( pacman -Q | awk {' print $1 '} | grep "^$cur" 2> /dev/null ) )
    return 0
}
complete -F _PACUN pacun

_PACKAGES()
{
   local cur prev words cword
    _init_completion || return

    case $prev in
        uninstall|reinstall)
            COMPREPLY=( $( dpkg --get-selections  | grep -v deinstall | awk {' print $1 '} "$cur" 2> /dev/null ) )
            return
            ;;
        files|install|show)
            COMPREPLY=( $( apt-cache --no-generate pkgnames "$cur" 2> /dev/null ) )
            return
            ;;
    esac

    COMPREPLY=( $( compgen -W 'files install list-all list-installed reinstall search show uninstall upgrade' -- "$cur" ) )
    return 0
}
complete -F _PACKAGES packages

_PSQ()
{
    local cur
    cur=${COMP_WORDS[COMP_CWORD]}
    processes=$( ps -A | awk '{print $NF}' | grep -v '\/' | sort | uniq | sed ':a;N;$!ba;s/\n/\ /g' )
    COMPREPLY=( $(compgen -W "$processes" -- "$cur" ) )
    return 0
}
complete -F _PSQ psgrep

_CQ()
{
    local cur
    cur=${COMP_WORDS[COMP_CWORD]}
    local cterm
    cterm="3DES AES AES128 AES256 AESGCM ALL aRSA CAMELLIA CAMELLIA128 CAMELLIA256 CHACHA20 DES EDH EECDH EXPORT FIPS HIGH kEDH kEECDH kRSA LOW MD5 MEDIUM SRP RC2 RC4 RSA SEED SHA SHA1 SHA256 SHA384 SSLv2 SSLv3 TLSv1 TLSv1.2"
    COMPREPLY=( $(compgen -W "$cterm" -- "$cur" ) )
    return 0
}
complete -F _CQ cq

_CQN()
{
    local cur
    cur=${COMP_WORDS[COMP_CWORD]}
    local cterm
    cterm="3DES ADH aDSS AECDH aECDSA AES AES128 AES256 AESGCM ALL aRSA CAMELLIA CAMELLIA128 CAMELLIA256 CHACHA20 COMPLEMENTOFALL DES DH DSS ECDH ECDSA EDH EECDH EXPORT FIPS HIGH kEDH kEECDH kRSA LOW MD5 MEDIUM NULL PSK SRP RC2 RC4 RSA SEED SHA SHA1 SHA256 SHA384 SSLv2 SSLv3 TLSv1 TLSv1.2"
    COMPREPLY=( $(compgen -W "$cterm" -- "$cur" ) )
    return 0
}
complete -F _CQN cqn

_DROPBOX()
{
    local cur
    cur=${COMP_WORDS[COMP_CWORD]}
    local cterm
    cterm="status throttle help puburl stop running start filestatus ls autostart exclude lansync sharelink proxy"
    COMPREPLY=( $(compgen -W "$cterm" -- "$cur" ) )
    return 0
}
complete -F _DROPBOX dropbox

_VAGRANT()
{
    local cur
    cur=${COMP_WORDS[COMP_CWORD]}
    local cterm
	cterm="box connect destroy docker-logs docker-run global-status halt help init list-commands login package plugin provision push rdp reload resume rsync rsync-auto share ssh ssh-config status suspend up version"
    COMPREPLY=( $(compgen -W "$cterm" -- "$cur" ) )
    return 0
}
complete -F _VAGRANT vagrant


_BITBUCKET()
{
    local cur
    cur=${COMP_WORDS[COMP_CWORD]}
    local cterm
	cterm="create update delete clone create_from_local pull_request pull download list privilege group-privilege add_remote"
    COMPREPLY=( $(compgen -W "$cterm" -- "$cur" ) )
    return 0
}
complete -F _BITBUCKET bitbucket
complete -F _BITBUCKET bb

_GRM()
{
    local cur
    cur=${COMP_WORDS[COMP_CWORD]}
    local cterm
	cterm=$(git branch --no-color 2> /dev/null | sed 's/*/ /g' 2> /dev/null )
    COMPREPLY=( $(compgen -W "$cterm" -- "$cur" ) )
    return 0
}
complete -F _GRM grm

# add artisan as an alias function
function artisan() {  
    php artisan --ansi "$@"
}

# source: https://nullifer.io/artisan-bash-autocompletion/
_artisan()  
{

    local cache commands artisanOutput word

    if [ $(basename "$1") != artisan ] || [ ! -e "$1" ]; then
        return 0;
    fi

    _get_comp_words_by_ref -n : -c word

    cache=/tmp/.artisan_command_cache_$BASHPID
    commands=()

    # enables cache per terminal session
    # calling artisan is too time consuming for each tab press
    if [ -f $cache ];
    then
        commands=$(cat "$cache")
    else
        commands=$(php artisan list --raw | cut -f 1 -d " " | tr "\n" " ")
        printf "%s\n" "${commands[@]}" > "$cache"
    fi

    COMPREPLY=( $(compgen -W "${commands}" -- $word) )

    # remove color from the word breaking list
    __ltrim_colon_completions "$word"

    return 0
}
complete -o default -F _artisan artisan 

# source: https://github.com/iArren/composer-bash-completion
_composer()
{
    local cur prev words cword
    _init_completion || return

    local special i
    for (( i=0; i < ${#words[@]}-1; i++ )); do
        if [[ ${words[i]} == @(require) ]]; then
            special=${words[i]}
        fi
    done

    local cache=$HOME/.composer-completion
    if [[ -n $special ]]; then
        local packages=$cache/packages.list
        local providers=$cache/providers.list
        if [ ! -f $packages -o $( which composer ) -nt $packages ]; then
            # checking existance of the packages list
            mkdir -p $cache
            composer show -a | grep -v '^No composer' >$packages
            # cut -d '/' -f 1 $packages  | sort | uniq > $providers
            cat $packages | awk -F "/" '{ print $1 "/" }' | sort | uniq > $providers
        fi
        if [[ $prev != $special ]]; then
            # assume $prev is a package name
            if [[ $( cat $packages | grep "^$prev" | wc -l ) -gt 0 ]]; then
                local versions=$cache/packages/$prev/versions
                if [ ! -f $versions -o $packages -nt $versions ]; then
                    # checking cache existance
                    mkdir -p $( dirname $versions )
                    composer show $prev | \
                        sed -r -e 's/\x1b\[[0-9]+m//g' | grep ^versions | \
                        sed -r -e 's/^versions : //' -e 's/, /\n/g' >$versions
                fi
                COMPREPLY=( $( cat $versions | grep "^$cur" | sort -u ) )
            fi
        fi
        if [[ -z $COMPREPLY ]]; then
            # if $prev was not a package
            COMPREPLY=( $( cat $packages | grep "^$cur" | sort -u ) )
            # if [[ ! $cur =~ */* ]]; then
            #     COMPREPLY=( $( cat $providers | grep "^$cur" | sort -u ) )
            # else
            #     COMPREPLY=( $( cat $packages | grep "^$cur" | sort -u ) )
            # fi
        fi
        return 0
    fi

    if [[ "$cur" == -* ]]; then
        COMPREPLY=( $( compgen -W '-h -q -v -V -n -d \
            --help --quiet --verbose --version --ansi --no-ansi \
            --no-interaction --profile --working-dir' -- "$cur" ) )
    else
        COMPREPLY=( $( compgen -W 'about archive config create-project \
            depends diagnose dumpautoload \
            help init install list require search \
            selfupdate show status update validate' -- "$cur" ) )
    fi

    return 0
} &&
complete -F _composer composer

_cipherscan()
{
    local cur prev words cword
    _init_completion || return

    case $prev in
        -o|--openssl|--cafile|--savecrt)
            _filedir
            return
            ;;
        --capath|--savecrt)
            _filedir -d
            return
            ;;
        -d|--delay)
            # expect integer number
            COMPREPLY+=( $( compgen -P "$cur" -W "{0..9}" ) )
            compopt -o nospace
            return
            ;;
        -starttls)
            COMPREPLY=( $( compgen -W 'smtp imap pop3 ftp xmpp' -- "$cur" ) )
            return
            ;;
        -servername|-verify_hostname)
            _known_hosts_real "$cur"
            return
            ;;
        -verify_ip)
            _ip_addresses "$cur"
            return
            ;;
    esac

    if [[ $cur == -* ]]; then
        COMPREPLY=( $( compgen -W '$( _parse_help "$1" ) --cafile' -- "$cur" ) )
        [[ $COMPREPLY == *= ]] && compopt -o nospace
        return
    fi

    # $split && return
    _known_hosts_real "$cur"
}
complete -F _cipherscan cipherscan;
complete -F _cipherscan cs;

# _CSCAN()
# {
#     #~/.cipherscan/hosts.log
#     local cur
#     cur=${COMP_WORDS[COMP_CWORD]}
#     hosts=$( cat $HOME/.cipherscan/hosts.log | grep "\." | sed ':a;N;$!ba;s/\n/\ /g' )
#     COMPREPLY=( $(compgen -W "$hosts" -- "$cur" ) )
#     return 0
# }
