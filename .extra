umask 0002

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
fi

_AI()
{
    local cur
    cur=${COMP_WORDS[COMP_CWORD]}

    COMPREPLY=( $( apt-cache --no-generate pkgnames "$cur" 2> /dev/null ) )
    return 0
}
complete -F _AI ai

_AIV()
{
    local cur
    cur=${COMP_WORDS[COMP_CWORD]}

    COMPREPLY=( $( apt-cache --no-generate pkgnames "$cur" 2> /dev/null ) )
    return 0
}
complete -F _AIV aiv

_AQ()
{
    local cur
    cur=${COMP_WORDS[COMP_CWORD]}

    COMPREPLY=( $( apt-cache --no-generate pkgnames "$cur" 2> /dev/null ) )
    return 0
}
complete -F _AQ aq

_AG()
{
    local cur
    cur=${COMP_WORDS[COMP_CWORD]}

    COMPREPLY=( $( apt-cache --no-generate pkgnames "$cur" 2> /dev/null ) )
    return 0
}
complete -F _AG ag

_AQG()
{
    local cur
    cur=${COMP_WORDS[COMP_CWORD]}

    COMPREPLY=( $( apt-cache --no-generate pkgnames "$cur" 2> /dev/null ) )
    return 0
}
complete -F _AQ aqg

_PSQ()
{
    local cur
    cur=${COMP_WORDS[COMP_CWORD]}
    processes=$( ps -A | awk '{print $NF}' | grep -v '\/' | sort | uniq | sed ':a;N;$!ba;s/\n/\ /g' )
    COMPREPLY=( $(compgen -W "$processes" -- "$cur" ) )
    return 0
}
complete -F _PSQ psgrep

_CQ()
{
    local cur
    cur=${COMP_WORDS[COMP_CWORD]}
    local cterm
    cterm="3DES AES AES128 AES256 AESGCM ALL aRSA CAMELLIA CAMELLIA128 CAMELLIA256 CHACHA20 DES EDH EECDH EXPORT FIPS HIGH kEDH kEECDH kRSA LOW MD5 MEDIUM SRP RC2 RC4 RSA SEED SHA SHA1 SHA256 SHA384 SSLv2 SSLv3 TLSv1 TLSv1.2"
    COMPREPLY=( $(compgen -W "$cterm" -- "$cur" ) )
    return 0
}
complete -F _CQ cq

_CQN()
{
    local cur
    cur=${COMP_WORDS[COMP_CWORD]}
    local cterm
    cterm="3DES ADH aDSS AECDH aECDSA AES AES128 AES256 AESGCM ALL aRSA CAMELLIA CAMELLIA128 CAMELLIA256 CHACHA20 COMPLEMENTOFALL DES DH DSS ECDH ECDSA EDH EECDH EXPORT FIPS HIGH kEDH kEECDH kRSA LOW MD5 MEDIUM NULL PSK SRP RC2 RC4 RSA SEED SHA SHA1 SHA256 SHA384 SSLv2 SSLv3 TLSv1 TLSv1.2"
    COMPREPLY=( $(compgen -W "$cterm" -- "$cur" ) )
    return 0
}
complete -F _CQN cqn

_composer()
{
    local cur prev opts base packages cmd actions
    COMPREPLY=()
    cur="${COMP_WORDS[COMP_CWORD]}"
    prev="${COMP_WORDS[COMP_CWORD-1]}"
    cmd=${COMP_WORDS[0]}
    actions=$( $cmd list --raw | cut -f 1 -d " " | tr "\n" " " )
	archivefilename=$HOME/.composer/cache/repo/https---packagist.org/p-provider-archived.json
	if [ !-r "$archivefilename" ]; then
		return 0
	fi
    packages=$( sed 's/,/\n/g' $HOME/.composer/cache/repo/https---packagist.org/p-provider-archived.json | sed 's/"//g' | sed 's/\:/\t/g' | awk {' print $1 '} | sed 's/\\\//\//g' | grep -v '{' 2> /dev/null )
    opts=$( $cmd --no-ansi $cur 2>/dev/null  | awk {' print $1 '} 2>/dev/null | grep "\-\-" | tr "\n" " " )
    
    if [[ ${cur} == -* ]] ; then
        COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
        return 0
    fi
    
    if ($cmd > /dev/null 2>&1); then
        case "${prev}" in
            require)
                COMPREPLY=( $(compgen -W "$packages" -- "$cur" ) )
                return 0
                ;;
            install)
                COMPREPLY=( $(compgen -W "$packages" -- "$cur" ) )
                return 0
                ;;
            derp)
                COMPREPLY=( $(compgen -W "herp derp herpderp hurr fuuu" -- "$cur" ) )
                return 0
                ;;
            *)
                ;;
        esac
    fi
    if [[ ${cur} == -* ]] ; then
        COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
        return 0
    fi

    COMPREPLY=( $(compgen -W "$actions" -- $cur) )
}
complete -F _composer composer
